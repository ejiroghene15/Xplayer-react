{"version":3,"sources":["serviceWorker.js","audioctrl.js","index.js"],"names":["Boolean","window","location","hostname","match","axios","defaults","baseURL","API","AudioPlayer","props","music_player","document","querySelector","triggerUpload","click","getMp3Data","a","_audio","audio_files","files","fd","FormData","append","Array","from","forEach","val","indx","name","type","saveSong","song","post","then","data","status","updatePlaylist","songs","fetchSongs","get","togglePlayer","source","src","paused","play","pause","setState","playlist","state","this","Fragment","className","onClick","accept","id","multiple","onChange","bind","controls","length","Component","MusicList","map","key","title","size","duration","parseInt","hours","mins","secs","songDuration","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d15770f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// axios.defaults.baseURL = \"https://inexus.dev/react_app/xplayer/\";\r\naxios.defaults.baseURL = \"http://localhost/tuts/\";\r\nconst API = axios.defaults.baseURL;\r\n\r\nclass AudioPlayer extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tplaylist: [],\r\n\t\t};\r\n\t\tthis.fetchSongs();\r\n\t}\r\n\r\n\tmusic_player = () => document.querySelector(\"#music_player\");\r\n\r\n\ttriggerUpload = () => document.querySelector(\"#upload_song\").click();\r\n\r\n\tgetMp3Data = async () => {\r\n\t\tlet _audio = document.querySelector(\"#upload_song\");\r\n\t\tlet audio_files = _audio.files;\r\n\t\tlet fd = new FormData();\r\n\t\tfd.append(\"action\", \"addsong\");\r\n\r\n\t\tArray.from(audio_files).forEach(async (val, indx) => {\r\n\t\t\tlet { name, type } = _audio.files[indx];\r\n\t\t\tif (type.match(\"audio/\")) {\r\n\t\t\t\tfd.append(`${name}`, _audio.files[indx]);\r\n\t\t\t}\r\n\t\t});\r\n\t\tawait this.saveSong(fd);\r\n\t};\r\n\r\n\tsaveSong = async (song) => {\r\n\t\taxios.post(`song_controller.php`, song).then(({ data }) => {\r\n\t\t\tif (data.status == true) {\r\n\t\t\t\tthis.updatePlaylist(data.songs);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tfetchSongs = async () => {\r\n\t\taxios.get(`song_controller.php`).then(({ data }) => {\r\n\t\t\tif (data.status == true) {\r\n\t\t\t\tthis.updatePlaylist(data.songs);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\ttogglePlayer = (source) => {\r\n\t\t/*\r\n\t\t * toggle the play and pause action when a song is clicked on\r\n\t\t */\r\n\t\tconst { src, paused } = this.music_player();\r\n\t\tif (src !== source) {\r\n\t\t\tthis.music_player().src = source;\r\n\t\t\tthis.music_player().play();\r\n\t\t} else {\r\n\t\t\tpaused ? this.music_player().play() : this.music_player().pause();\r\n\t\t}\r\n\t};\r\n\r\n\tupdatePlaylist = (songs) => {\r\n\t\tif (songs !== false) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tplaylist: [...songs],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { playlist } = this.state;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<button className=\"btn btn-sm btn-info\" onClick={this.triggerUpload}>\r\n\t\t\t\t\tUpload Song\r\n\t\t\t\t</button>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\taccept=\"audio/*\"\r\n\t\t\t\t\tclassName=\"d-none\"\r\n\t\t\t\t\tid=\"upload_song\"\r\n\t\t\t\t\tmultiple\r\n\t\t\t\t\tonChange={this.getMp3Data.bind(this)}\r\n\t\t\t\t/>\r\n\t\t\t\t<audio controls id=\"music_player\" className=\"d-none\"></audio>\r\n\t\t\t\t{playlist.length > 0 ? (\r\n\t\t\t\t\t<MusicList playlist={playlist} togglePlayer={this.togglePlayer} />\r\n\t\t\t\t) : null}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst MusicList = ({ playlist, togglePlayer }) => {\r\n\tlet songDuration = (duration) => {\r\n\t\tduration = parseInt(duration);\r\n\t\tlet hours = parseInt(duration / (60 * 60));\r\n\t\tlet mins = parseInt((duration % (60 * 60)) / 60);\r\n\t\tlet secs = parseInt(duration % 60);\r\n\t\tsecs = secs < 10 ? `0${secs}` : secs;\r\n\t\treturn (duration =\r\n\t\t\thours > 0 ? `${hours}:${mins}:${secs}` : `${mins}:${secs}`);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"list-group animate__animated animate__fadeIn\">\r\n\t\t\t\t{playlist.map(({ name, title, source, size, duration }, key) => (\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\tonClick={() => togglePlayer(`${API}${source}`)}\r\n\t\t\t\t\t\tclassName=\"list-group-item list-group-item-action \"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className=\"d-flex flex-column\">\r\n\t\t\t\t\t\t\t<div className=\"d-flex justify-content-between\">\r\n\t\t\t\t\t\t\t\t<h6>{title}</h6>\r\n\t\t\t\t\t\t\t\t<small>{songDuration(duration)}</small>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<small>\r\n\t\t\t\t\t\t\t\t<b>{size} </b>\r\n\t\t\t\t\t\t\t</small>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default AudioPlayer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"animate.css\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AudioPlayer from \"./audioctrl\";\r\n// import { silence } from \"./model/kitty\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<AudioPlayer />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}