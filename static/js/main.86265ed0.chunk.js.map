{"version":3,"sources":["serviceWorker.js","audioctrl.js","index.js"],"names":["Boolean","window","location","hostname","match","api","AudioPlayer","props","music_player","document","querySelector","triggerUpload","click","songDuration","duration","parseInt","hours","mins","secs","getMp3Data","_audio","audio_files","files","Array","from","forEach","val","indx","name","type","size","parseFloat","toPrecision","reader","FileReader","reader2","onload","a","result","target","AudioContext","webkitAudioContext","decodeAudioData","buffer","saveSong","readAsArrayBuffer","readAsDataURL","title","source","fetch","method","headers","Accept","body","JSON","stringify","action","then","res","json","updatePlaylist","catch","err","console","log","fetchSongs","togglePlayer","src","paused","play","pause","songs","setState","playlist","state","this","Fragment","className","onClick","accept","id","multiple","onChange","bind","controls","length","Component","MusicList","map","key","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.86265ed0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\n\nconst api = \"http://127.0.0.1/tuts\";\n\nclass AudioPlayer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplaylist: [],\n\t\t};\n\t\tthis.fetchSongs();\n\t}\n\n\tmusic_player = () => document.querySelector(\"#music_player\");\n\n\ttriggerUpload = () => document.querySelector(\"#upload_song\").click();\n\n\tsongDuration = (duration) => {\n\t\tduration = parseInt(duration);\n\t\tlet hours = parseInt(duration / (60 * 60));\n\t\tlet mins = parseInt((duration % (60 * 60)) / 60);\n\t\tlet secs = parseInt(duration % 60);\n\t\tsecs = secs < 10 ? `0${secs}` : secs;\n\t\treturn (duration =\n\t\t\thours > 0 ? `${hours}:${mins}:${secs}` : `${mins}:${secs}`);\n\t};\n\n\tgetMp3Data = () => {\n\t\tlet _audio = document.querySelector(\"#upload_song\");\n\t\tlet audio_files = _audio.files;\n\t\tArray.from(audio_files).forEach((val, indx) => {\n\t\t\tlet { name, type, size } = _audio.files[indx];\n\t\t\tif (type.match(\"audio/\")) {\n\t\t\t\tsize = size / 1048576;\n\t\t\t\tsize = parseFloat(size).toPrecision(3) + \" MB\";\n\t\t\t\tlet reader = new FileReader();\n\t\t\t\tlet reader2 = reader;\n\t\t\t\treader.onload = async ({ target: { result } }) => {\n\t\t\t\t\treader2.onload = ({ target }) => {\n\t\t\t\t\t\tlet audioContext = new (window.AudioContext ||\n\t\t\t\t\t\t\twindow.webkitAudioContext)();\n\t\t\t\t\t\taudioContext.decodeAudioData(target.result, async (buffer) => {\n\t\t\t\t\t\t\tlet duration = this.songDuration(buffer.duration);\n\t\t\t\t\t\t\tawait this.saveSong(name, name, size, result, duration);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\treader2.readAsArrayBuffer(_audio.files[indx]);\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(_audio.files[indx]);\n\t\t\t}\n\t\t});\n\t};\n\n\tsaveSong = async (name, title, size, source, duration) => {\n\t\t/*\n\t\t * save the song to the db with the following params\n\t\t * name => primary key used to identify the song\n\t\t * title => Initially set to the name of the song, but can be edited.\n\t\t * size => the size of the song in mega bytes\n\t\t * source => the source of the song\n\t\t * duration => the duration of the song.\n\t\t */\n\t\tawait fetch(`${api}/song_controller.php`, {\n\t\t\tmethod: \"post\",\n\t\t\theaders: {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\taction: \"song_controller\",\n\t\t\t\tname,\n\t\t\t\ttitle,\n\t\t\t\tsize,\n\t\t\t\tsource,\n\t\t\t\tduration,\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => this.updatePlaylist(res))\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\tfetchSongs = async () => {\n\t\t/*\n\t\t * get all the songs stored in the database when the page loads\n\t\t */\n\t\tawait fetch(`${api}/song_controller.php`, {\n\t\t\tmethod: \"post\",\n\t\t\theaders: {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\taction: \"getsongs\",\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => {\n\t\t\t\t// console.log(res);\n\t\t\t\tthis.updatePlaylist(res);\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\ttogglePlayer = (source) => {\n\t\t/*\n\t\t * toggle the play and pause action when a song is clicked on\n\t\t */\n\t\tconst { src, paused } = this.music_player();\n\t\tif (src !== source) {\n\t\t\tthis.music_player().src = source;\n\t\t\tthis.music_player().play();\n\t\t} else {\n\t\t\tpaused ? this.music_player().play() : this.music_player().pause();\n\t\t}\n\t};\n\n\tupdatePlaylist = (songs) => {\n\t\tif (songs !== false) {\n\t\t\tthis.setState({\n\t\t\t\tplaylist: [...songs],\n\t\t\t});\n\t\t}\n\t};\n\n\trender() {\n\t\tconst { playlist } = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<button className=\"btn btn-sm btn-info\" onClick={this.triggerUpload}>\n\t\t\t\t\tUpload Song\n\t\t\t\t</button>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\taccept=\"audio/*\"\n\t\t\t\t\tclassName=\"d-none\"\n\t\t\t\t\tid=\"upload_song\"\n\t\t\t\t\tmultiple\n\t\t\t\t\tonChange={this.getMp3Data.bind(this)}\n\t\t\t\t/>\n\t\t\t\t<audio controls id=\"music_player\" className=\"d-none\"></audio>\n\t\t\t\t{playlist.length > 0 ? (\n\t\t\t\t\t<MusicList playlist={playlist} togglePlayer={this.togglePlayer} />\n\t\t\t\t) : null}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nconst MusicList = ({ playlist, togglePlayer }) => {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"list-group animate__animated animate__fadeIn\">\n\t\t\t\t{playlist.map(({ name, title, source, size, duration }, key) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\tonClick={() => togglePlayer(`${api}/${source}`)}\n\t\t\t\t\t\tclassName=\"list-group-item list-group-item-action \"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"d-flex flex-column\">\n\t\t\t\t\t\t\t<div className=\"d-flex justify-content-between\">\n\t\t\t\t\t\t\t\t<h6>{title}</h6>\n\t\t\t\t\t\t\t\t<small>{duration}</small>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\t\t<b>{size} </b>\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default AudioPlayer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"animate.css\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AudioPlayer from \"./audioctrl\";\n// import { silence } from \"./model/kitty\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<AudioPlayer />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}